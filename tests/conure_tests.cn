// Once debug logs are out of the way this will be much smoother
// Also 'write' may turn to only a function later on
// TODO: Add multi-line comments
// TODO: Add relative path finding for files according to PWD
// TODO: Add interactive history in the REPL

// 1 (Arithmetic)
write("|TEST 1: Arithmetic|");

write(1 + 2 + 3 + 4 + 5);

// 2 (Boolean logic)
write("|TEST 2: Boolean Logic|");

write(!(5 - 4 > 3 * 2 == !null));

// 3 (String operations)
write("|TEST 3: String Operations|");

write("st" + "ri" + "ng");

// 4 (Global variable operations)
write("|TEST 4: Variable Operations|");

let breakfast = "beignets";
let beverage = "cafe au lait";
breakfast = "beignets with " + beverage;
write(breakfast);

// 5 (Blocks and local variable operations)
write("|TEST 5: Blocks and Locals|");

{
  let a = "outer";
  {
    let a = "inner";
  }
}

// ERROR CASES (for testing error handling)
//{
//  let a = "first";
//  let a = "second";
//}

//{
//  let a = "outer";
//  {
//    let a = a;
//  }
//}

// 6 (Conditional statements and loops)
write("|TEST 6: Control Flow|");

let a = 1; // OR: a = 4, a = 5;
if (a <= 2) {
  write("yes");
} else if (a == 4) {
	write("maybe");
} else {
  write("no");
}

let b = 1;
while (b < 10) {
  write(b);
  b = b + 1;
}

// TODO: Add short assignment (i.e, +=, -=, etc.)
for (let i = 1; i < 10; i = i + 1) {
  write(i);
}

// 7 (Functions and closures)
write("|TEST 7: Functional Operations|");

fun fib(n) {
  if (n < 2) return n;
  return fib(n - 2) + fib(n - 1);
}

let start = clock(); // Built-in exec-time function
// TODO: Increase margin of switching to sci-notation
write(fib(10));
// Upwards of 'fib(25)' can take up to 5 minutes to finish execution 
// (3 seconds without debug info, like Python) (TODO: optimize recursion)
write(clock() - start);

// 8 (Advanced embedded closures)
write("|TEST 8: Advanced Closures|");

let globalOne;
let globalTwo;

fun main() {
  for (let a = 1; a <= 2; a = a + 1) {
    fun closure() {
      write(a);
    }
    if (globalOne == null) {
      globalOne = closure;
    } else {
      globalTwo = closure;
    }
  }
}

main();
globalOne();
globalTwo();

// 8 (Garbage collection)
write("|TEST 8: Garbage Collection|");

fun makeClosure() {
  let a = "data";

  fun f() { write(a); }
  return f;
}

let closure = makeClosure();
// Garbage collection here
closure();

// 9 (Classes and instances)
write("|TEST 9: Classes and Instances|");

class Pair {}

let pair = Pair();
pair.first = 1;
pair.second = 2;
write(pair.first + pair.second); // 3

// 10 (Methods and constructors)
write("|TEST 10: Methods and Initializers|");

class CoffeeMaker {
  init(coffee) {
    this.coffee = coffee;
  }

  brew() {
    write("Enjoy your cup of " + this.coffee);

    this.coffee = null;
  }
}

let maker = CoffeeMaker("coffee and chicory");
maker.brew();

// 11 (Advanced OOP and inheritance)
write("|TEST 11: Superclasses and Inheritance|");

class Donut {
  cook() {
    print "Fry until golden brown";
    inner();
    print "Place in a nice box";
  }
}

// Default C#/D highlights this below line as an error
// Maybe modify the syntax highlighting and linting for Conure 
class BostonCream < Donut {//EXR3
  cook() {
    write("Pipe full of custard and coat with chocolate");
  }
}

BostonCream().cook();